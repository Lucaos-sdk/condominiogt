const axios = require('axios');

const API_BASE = 'http://localhost:3001/api';

async function testAPIs() {
  console.log('üß™ Testando APIs via HTTP...\n');

  try {
    let authToken = '';

    // Test 1: Health Check
    console.log('1. Testando health check...');
    const healthResponse = await axios.get('http://localhost:3001/health');
    console.log('‚úÖ Health check:', healthResponse.data.status);

    // Test 2: Login
    console.log('2. Testando login...');
    try {
      const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
        email: 'admin@condominiogt.com',
        password: 'admin123'
      });
      authToken = loginResponse.data.data.token;
      console.log('‚úÖ Login realizado com sucesso');
    } catch (error) {
      console.log('‚ö†Ô∏è  Login com credenciais padr√£o falhou, tentando criar usu√°rio admin...');
      
      // Try to register admin user
      try {
        await axios.post(`${API_BASE}/auth/register`, {
          name: 'Admin Test',
          email: 'admin@test.com',
          password: 'admin123',
          phone: '11999999999',
          role: 'admin'
        });
        
        const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
          email: 'admin@test.com',
          password: 'admin123'
        });
        authToken = loginResponse.data.data.token;
        console.log('‚úÖ Admin criado e login realizado');
      } catch (registerError) {
        console.log('‚ùå Erro ao criar admin:', registerError.response?.data?.message || registerError.message);
        return;
      }
    }

    const headers = { Authorization: `Bearer ${authToken}` };

    // Test 3: Get Profile
    console.log('3. Testando obten√ß√£o de perfil...');
    const profileResponse = await axios.get(`${API_BASE}/auth/profile`, { headers });
    console.log('‚úÖ Perfil obtido:', profileResponse.data.data.user.name);

    // Test 4: Get Condominiums
    console.log('4. Testando listagem de condom√≠nios...');
    const condominiumsResponse = await axios.get(`${API_BASE}/condominiums`, { headers });
    console.log('‚úÖ Condom√≠nios obtidos:', condominiumsResponse.data.data.condominiums.length, 'registros');

    let testCondominiumId = null;
    if (condominiumsResponse.data.data.condominiums.length > 0) {
      testCondominiumId = condominiumsResponse.data.data.condominiums[0].id;
    } else {
      // Create a condominium for testing
      console.log('5. Criando condom√≠nio para teste...');
      const createCondominiumResponse = await axios.post(`${API_BASE}/condominiums`, {
        name: 'API Test Condominium',
        address: 'API Test Address 123',
        city: 'API Test City',
        state: 'AT',
        zip_code: '12345678',
        total_units: 30
      }, { headers });
      testCondominiumId = createCondominiumResponse.data.data.condominium.id;
      console.log('‚úÖ Condom√≠nio criado para teste:', testCondominiumId);
    }

    // Test 5: Get Condominium Stats
    console.log('6. Testando estat√≠sticas do condom√≠nio...');
    const statsResponse = await axios.get(`${API_BASE}/condominiums/${testCondominiumId}/stats`, { headers });
    console.log('‚úÖ Estat√≠sticas obtidas. Cache:', statsResponse.headers['x-cache'] || 'N/A');

    // Test 6: Get Financial Balance
    console.log('7. Testando saldo financeiro...');
    const balanceResponse = await axios.get(`${API_BASE}/financial/balance/${testCondominiumId}`, { headers });
    console.log('‚úÖ Saldo obtido:', balanceResponse.data.data.balance);

    // Test 7: Create Financial Transaction
    console.log('8. Testando cria√ß√£o de transa√ß√£o financeira...');
    const transactionResponse = await axios.post(`${API_BASE}/financial/transactions`, {
      condominium_id: testCondominiumId,
      title: 'API Test Transaction',
      description: 'Transaction created via API test',
      type: 'income',
      category: 'condominium_fee',
      amount: 500.00,
      due_date: new Date().toISOString(),
      payment_method: 'pix'
    }, { headers });
    console.log('‚úÖ Transa√ß√£o criada:', transactionResponse.data.data.transaction.title);

    // Test 8: Get Financial Transactions
    console.log('9. Testando listagem de transa√ß√µes...');
    const transactionsResponse = await axios.get(`${API_BASE}/financial/transactions`, { headers });
    console.log('‚úÖ Transa√ß√µes obtidas:', transactionsResponse.data.data.transactions.length, 'registros');

    // Test 9: Cache Test (second request should hit cache)
    console.log('10. Testando cache (segunda requisi√ß√£o)...');
    const statsResponse2 = await axios.get(`${API_BASE}/condominiums/${testCondominiumId}/stats`, { headers });
    console.log('‚úÖ Cache funcionando:', statsResponse2.headers['x-cache'] === 'HIT' ? 'HIT' : 'MISS');

    console.log('\nüéâ TODOS OS TESTES DE API PASSARAM! üéâ');
    console.log('\nüìä Resumo dos testes de API:');
    console.log('‚úÖ Health check funcionando');
    console.log('‚úÖ Sistema de autentica√ß√£o funcional');
    console.log('‚úÖ Obten√ß√£o de perfil funcionando');
    console.log('‚úÖ Listagem de condom√≠nios funcionando');
    console.log('‚úÖ Estat√≠sticas de condom√≠nio funcionando');
    console.log('‚úÖ Sistema financeiro funcional');
    console.log('‚úÖ Cria√ß√£o de transa√ß√µes funcionando');
    console.log('‚úÖ Sistema de cache operacional');

  } catch (error) {
    console.error('‚ùå Erro durante teste de API:', error.response?.data || error.message);
    if (error.response?.status === 401) {
      console.log('üí° Dica: Verifique se o backend est√° rodando e as credenciais est√£o corretas');
    }
  }
}

// Run API tests
testAPIs();